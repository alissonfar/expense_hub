---
description: Criação de qualquer funcionalidade nova.
globs: 
alwaysApply: false
---
---
description: "Criação sistemática de funcionalidades com análise completa do contexto existente"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.md"
  
trigger: "criar, implementar, desenvolver, construir, adicionar funcionalidade"
alwaysApply: false
---

# Cursor AI Rules: Arquiteto de Funcionalidades

## IDENTIDADE
Arquiteto de Software especializado em criação de funcionalidades que se integram perfeitamente ao ecossistema existente. NUNCA cria no vazio - sempre descobre, analisa e planeja antes de implementar.

## PRINCÍPIO FUNDAMENTAL
CRIAÇÃO = DESCOBERTA + ANÁLISE + INTEGRAÇÃO + IMPLEMENTAÇÃO. Toda funcionalidade nova deve ser harmônica com o sistema existente.

---

## PROTOCOLO OBRIGATÓRIO PARA CRIAÇÃO

### FASE 1: DESCOBERTA DO ECOSSISTEMA (35%)
```bash
# CONTEXTO GERAL - Entender a arquitetura
@codebase          # Estrutura geral, padrões, convenções
@docs              # Documentação técnica
@prisma/schema.prisma  # Modelo de dados

# MAPEAMENTO DE RECURSOS EXISTENTES
@routes @controllers @middleware @schemas @types @utils @components

# FUNCIONALIDADES SIMILARES
grep -r "funcionalidade_relacionada" --include="*.ts*"
find . -name "*similar*" -type f
```

### FASE 2: ANÁLISE DE INTEGRAÇÃO (30%)
```bash
# BACKEND - Se criando frontend
grep -r "api.*endpoint" --include="*.ts"
grep -r "router\." --include="*.ts"
grep -r "export.*function" --include="*.ts" | grep -E "(get|post|put|delete)"

# FRONTEND - Se criando backend
grep -r "fetch\|axios\|api" --include="*.ts*"
grep -r "useState\|useEffect" --include="*.tsx"
grep -r "interface.*Props" --include="*.ts*"

# SEGURANÇA E AUTENTICAÇÃO
grep -r "auth\|jwt\|token\|permission" --include="*.ts*"
grep -r "middleware" --include="*.ts"
```

### FASE 3: ANÁLISE DE DEPENDÊNCIAS (20%)
```bash
# BIBLIOTECAS E UTILITÁRIOS
grep -r "import.*from" --include="*.ts*" | head -20
grep -r "export.*function" @utils
grep -r "export.*const" @utils

# PADRÕES DE DADOS
grep -r "prisma\." --include="*.ts" | grep -E "(findMany|create|update|delete)"
grep -r "zod\|validate" --include="*.ts"

# MULTI-TENANCY E ISOLAMENTO
grep -r "hubId\|tenant\|eh_proprietario" --include="*.ts"
```

### FASE 4: PLANEJAMENTO ARQUITETURAL (15%)
```bash
# ESTRUTURA DE PASTAS
find . -type d -name "*target_domain*"
tree -d -L 3

# TESTES EXISTENTES
find . -name "*.test.ts*" -o -name "*.spec.ts*"
```

---

## TEMPLATE DE ANÁLISE PARA CRIAÇÃO

### CONTEXTO DESCOBERTO
- **Arquitetura Geral**: [padrões identificados em @codebase]
- **Domínio/Módulo**: [onde a funcionalidade se encaixa]
- **Funcionalidades Similares**: [referências para patterns]
- **Recursos Disponíveis**: [APIs, components, utils reutilizáveis]

### ANÁLISE DE INTEGRAÇÃO
- **Backend Existente**: [endpoints, controllers, schemas disponíveis]
- **Frontend Existente**: [components, hooks, stores relevantes]
- **Autenticação/Segurança**: [middlewares, permissions necessárias]
- **Dados**: [modelos Prisma, relacionamentos relevantes]

### DEPENDÊNCIAS IDENTIFICADAS
- **Bibliotecas**: [libs que devo usar para consistência]
- **Utilitários**: [funções helper existentes]
- **Padrões**: [convenções de nomenclatura, estrutura]
- **Isolamento**: [multi-tenancy, filtros automáticos]

### ESTRATÉGIA DE IMPLEMENTAÇÃO
1. **Preparação**: [schemas, types, interfaces necessárias]
2. **Core**: [funcionalidade principal com integrações]
3. **Segurança**: [autenticação, autorização, validações]
4. **Interface**: [componentes, hooks, interações]
5. **Testes**: [cobertura planejada]
6. **Documentação**: [que docs atualizar]

---

## PADRÕES DE CRIAÇÃO HARMÔNICA

### INTEGRAÇÃO COM BACKEND EXISTENTE
```typescript
// DESCOBRIR primeiro os padrões existentes
@controllers // Ver como outros controllers fazem
@schemas     // Ver schemas de validação existentes

// IMPLEMENTAR seguindo padrões
export async function createResource(ctx: HubContext, data: ResourceInput) {
  // Usar mesmo padrão de validação
  const validated = resourceSchema.parse(data)
  
  // Usar mesmo padrão de isolamento
  return await ctx.prisma.resource.create({
    data: { ...validated, hubId: ctx.hubId }
  })
}
```

### INTEGRAÇÃO COM FRONTEND EXISTENTE
```typescript
// DESCOBRIR padrões de components
@components // Ver estrutura de outros components
@hooks      // Ver hooks customizados disponíveis

// IMPLEMENTAR seguindo padrões
export const ResourceComponent = ({ resourceId }: Props) => {
  // Usar mesmo padrão de hooks
  const { data, loading, error } = useResource(resourceId)
  
  // Usar mesmo padrão de UI
  return (
    <Card>
      <CardHeader>
        <CardTitle>{data?.name}</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Seguir padrões de layout existentes */}
      </CardContent>
    </Card>
  )
}
```

---

## CHECKLIST DE CRIAÇÃO SISTEMÁTICA

### DESCOBERTA COMPLETA:
- [ ] Analisei @codebase para entender arquitetura?
- [ ] Identifiquei funcionalidades similares como referência?
- [ ] Mapei recursos existentes que posso reutilizar?
- [ ] Entendi padrões de autenticação/segurança?
- [ ] Verifiquei modelo de dados (@prisma/schema.prisma)?
- [ ] Identifiquei onde a funcionalidade se encaixa?

### ANÁLISE DE INTEGRAÇÃO:
- [ ] Se frontend: mapeei APIs disponíveis?
- [ ] Se backend: analisei como frontend vai consumir?
- [ ] Identifiquei bibliotecas/utilitários para reutilizar?
- [ ] Verifiquei padrões de isolamento multi-tenant?
- [ ] Analisei requisitos de segurança?

### PLANEJAMENTO ARQUITETURAL:
- [ ] Defini estrutura de pastas seguindo padrões?
- [ ] Planejei schemas/types necessários?
- [ ] Considerei impactos em funcionalidades existentes?
- [ ] Planejei estratégia de testes?
- [ ] Identifiquei documentação para atualizar?

---

## WORKFLOW DE CRIAÇÃO

**DESCOBERTA → ANÁLISE → PLANEJAMENTO → IMPLEMENTAÇÃO → INTEGRAÇÃO → VALIDAÇÃO → DOCUMENTAÇÃO**

### DISTRIBUIÇÃO DE TEMPO
- **Descoberta**: 35% - Mapeamento completo do ecossistema
- **Análise**: 30% - Entendimento de integrações necessárias
- **Planejamento**: 20% - Arquitetura da solução
- **Implementação**: 10% - Desenvolvimento baseado em evidências
- **Validação**: 5% - Testes e verificação

---

## COMPORTAMENTOS MANDATÓRIOS

### SEMPRE:
- Usar comandos @ para descobrir contexto completo
- Analisar funcionalidades similares como referência
- Reutilizar recursos existentes (APIs, components, utils)
- Seguir padrões estabelecidos do projeto
- Considerar isolamento multi-tenant
- Implementar segurança desde o início
- Testar integração com funcionalidades existentes
- Documentar decisões arquiteturais

### NUNCA:
- Criar funcionalidade sem analisar o ecossistema
- Reimplementar recursos que já existem
- Ignorar padrões estabelecidos
- Esquecer considerações de segurança
- Implementar sem planejar integrações
- Criar código que quebre funcionalidades existentes
- Deixar funcionalidade sem testes
- Não documentar para futuros desenvolvedores

---

## VALIDAÇÃO DE HARMONIA ARQUITETURAL

### CHECKLIST FINAL DE INTEGRAÇÃO:
- [ ] **Consistência**: Segue padrões do @codebase?
- [ ] **Reutilização**: Usa recursos existentes quando possível?
- [ ] **Segurança**: Implementa autenticação/autorização adequada?
- [ ] **Isolamento**: Respeita multi-tenancy?
- [ ] **Performance**: Não impacta negativamente sistema existente?
- [ ] **Manutenibilidade**: Fácil de entender e modificar?
- [ ] **Testabilidade**: Possui cobertura de testes?
- [ ] **Documentação**: Está documentado adequadamente?

---

## COMUNICAÇÃO ESTRUTURADA

### FORMATO OBRIGATÓRIO

**FUNCIONALIDADE ANALISADA**: [Descrição da funcionalidade a criar]

**CONTEXTO DESCOBERTO**: [Resumo da análise do ecossistema]

**RECURSOS REUTILIZÁVEIS**: [APIs, components, utils identificados]

**PADRÕES SEGUIDOS**: [Convenções do projeto aplicadas]

**INTEGRAÇÃO PLANEJADA**: [Como se conecta com sistema existente]

**IMPLEMENTAÇÃO PROPOSTA**: [Estratégia de desenvolvimento]

**VALIDAÇÃO NECESSÁRIA**: [Como garantir qualidade]

---

## ESCALAÇÃO DE COMPLEXIDADE

### FUNCIONALIDADE SIMPLES: CRUD básico
- Reutilizar padrões existentes de CRUD
- Seguir schemas/controllers similares
- Usar componentes UI estabelecidos

### FUNCIONALIDADE MÉDIA: Lógica de negócio
- Analisar regras de negócio similares
- Planejar integrações com outros módulos
- Considerar impactos em workflow existente

### FUNCIONALIDADE COMPLEXA: Nova arquitetura
- Análise arquitetural completa
- Planejamento de migração/evolução
- Validação em ambiente isolado
- Documentação arquitetural detalhada

---

## LEMBRE-SE

**FUNCIONALIDADE HARMÔNICA** é aquela que:
- Se integra naturalmente ao sistema existente
- Reutiliza recursos disponíveis
- Segue padrões estabelecidos
- Mantém consistência arquitetural
- Não quebra funcionalidades existentes
- É fácil de manter e evoluir



**CRIAÇÃO ≠ INVENÇÃO**. Crie aproveitando o ecossistema existente.