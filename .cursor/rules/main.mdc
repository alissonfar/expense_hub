---
description: 
globs: 
alwaysApply: true
---
# PERSONAL EXPENSE HUB - CONFIGURA√á√ÉO PRINCIPAL

## STACK TECNOL√ìGICA
- Node.js + Express + TypeScript
- PostgreSQL + Prisma ORM  
- JWT + bcrypt para autentica√ß√£o
- Zod para valida√ß√£o (mensagens em portugu√™s BR)
- Rate limiting, CORS, Helmet para seguran√ßa

## PRINC√çPIOS FUNDAMENTAIS
- **DESCOBERTA DIN√ÇMICA OBRIGAT√ìRIA:** SEMPRE usar comandos @ para entender o c√≥digo existente antes de implementar
- SEMPRE explicar problemas de forma did√°tica e simples
- C√≥digo limpo, tipado e bem documentado
- Logs estrat√©gicos em pontos cr√≠ticos
- Limpeza obrigat√≥ria ap√≥s corre√ß√µes (remover console.log, c√≥digo comentado)

## üîç METODOLOGIA DE DESCOBERTA DIN√ÇMICA

### FLUXO INVESTIGATIVO OBRIGAT√ìRIO ANTES DE IMPLEMENTAR
1. **@codebase** - An√°lise geral do projeto (arquitetura, padr√µes, estrutura)
2. **@routes** - Descobrir TODOS os endpoints existentes e seus padr√µes
3. **@controllers** - Analisar implementa√ß√µes atuais e padr√µes estabelecidos
4. **@schemas** - Verificar todas as valida√ß√µes existentes e seus formatos
5. **@prisma/schema.prisma** - Entender estrutura completa do banco de dados
6. **@middleware** - Descobrir middlewares dispon√≠veis e como s√£o usados
7. **@types** - Verificar tipagens existentes e interfaces definidas
8. **@utils** - Identificar utilit√°rios e helpers j√° implementados
9. **@docs** - Consultar documenta√ß√£o para contexto e decis√µes arquiteturais

### üß† MENTALIDADE DE INVESTIGA√á√ÉO
**ANTES DE ESCREVER QUALQUER LINHA DE C√ìDIGO:**

#### ‚ùå MENTALIDADE ERRADA:
- "Vou criar baseado no que imagino que existe"
- "Provavelmente tem X endpoints"  
- "Deve ter essas tabelas no banco"
- "Vou fazer igual a outros projetos que conhe√ßo"
- "Assumo que segue padr√£o Y"

#### ‚úÖ MENTALIDADE CORRETA:
- "Vou usar @codebase para DESCOBRIR como est√° implementado"
- "Vou verificar @routes para VER endpoints existentes"
- "Vou checar @prisma/schema.prisma para ENTENDER estrutura atual"
- "Vou analisar @controllers para APRENDER os padr√µes deste projeto"
- "Vou investigar @schemas para COMPREENDER as valida√ß√µes atuais"

## üìã CHECKLIST DE DESCOBERTA OBRIGAT√ìRIA

### ANTES DE IMPLEMENTAR QUALQUER FUNCIONALIDADE:
- [ ] **Arquitetura Geral:** Como o projeto est√° organizado? (@codebase)
- [ ] **Endpoints Similares:** Existem endpoints parecidos com o que vou criar? (@routes)
- [ ] **Padr√µes de Controller:** Como outros controllers s√£o estruturados? (@controllers)
- [ ] **Valida√ß√µes:** Que padr√µes de valida√ß√£o j√° existem? (@schemas)
- [ ] **Banco de Dados:** Como est√£o as tabelas/relacionamentos? (@prisma/schema.prisma)
- [ ] **Middlewares:** Que middlewares est√£o dispon√≠veis? (@middleware)
- [ ] **Tipos:** Que interfaces/tipos j√° existem? (@types)
- [ ] **Utilit√°rios:** Que helpers posso reutilizar? (@utils)
- [ ] **Autentica√ß√£o:** Como funciona o sistema de auth atual?
- [ ] **Tratamento de Erros:** Qual padr√£o de error handling usado?

## üîç PERGUNTAS INVESTIGATIVAS OBRIGAT√ìRIAS
**DEVE RESPONDER ANTES DE IMPLEMENTAR:**

1. **Contexto:** "O que j√° existe relacionado a isso no @codebase?"
2. **Padr√µes:** "Como implementa√ß√µes similares s√£o feitas em @controllers?"
3. **Valida√ß√£o:** "Que valida√ß√µes e schemas existem em @schemas?"
4. **Seguran√ßa:** "Que middlewares est√£o dispon√≠veis em @middleware?"
5. **Dados:** "Como est√° a estrutura atual em @prisma/schema.prisma?"
6. **Tipagem:** "Que tipos/interfaces existem em @types?"
7. **Reutiliza√ß√£o:** "Que utilit√°rios posso usar de @utils?"
8. **Consist√™ncia:** "Como outros endpoints similares s√£o implementados?"

## üéØ PROCESSO DE AN√ÅLISE DIN√ÇMICA

### ETAPA 1: RECONHECIMENTO GERAL
```bash
@codebase # Entender arquitetura geral, estrutura, padr√µes principais
```

### ETAPA 2: AN√ÅLISE ESPEC√çFICA POR CAMADA
```bash
@routes        # Mapear todos os endpoints
@controllers   # Estudar implementa√ß√µes atuais
@middleware    # Descobrir prote√ß√µes/valida√ß√µes dispon√≠veis  
@schemas       # Entender padr√µes de valida√ß√£o
@types         # Ver tipagens existentes
@utils         # Identificar utilit√°rios reutiliz√°veis
```

### ETAPA 3: AN√ÅLISE DE DADOS
```bash
@prisma/schema.prisma  # Entender modelo de dados completo
```

### ETAPA 4: DOCUMENTA√á√ÉO
```bash
@docs  # Consultar decis√µes arquiteturais e contexto
```

## ESTRUTURA DE RESPOSTA PADR√ÉO
```typescript
// Sucesso
{ 
  success: true, 
  data: {...}, 
  message?: string,
  timestamp: new Date().toISOString()
}

// Erro  
{ 
  success: false, 
  error: { 
    code: string, 
    message: string, 
    details?: [...] 
  },
  timestamp: new Date().toISOString()
}
```

## üìö AN√ÅLISE E EXPLICA√á√ÉO DE PROBLEMAS
- SEMPRE explicar problemas com linguagem simples e did√°tica
- Detalhar o QUE est√° acontecendo, POR QUE est√° acontecendo, e COMO resolver
- Apresentar m√∫ltiplas solu√ß√µes quando poss√≠vel, explicando pr√≥s e contras
- Usar analogias do mundo real quando ajudar no entendimento
- **SEMPRE mostrar O QUE DESCOBRIU durante a an√°lise do c√≥digo**

## üßπ LIMPEZA P√ìS-CORRE√á√ÉO ‚ö†Ô∏è CR√çTICO
**AP√ìS CONFIRMAR QUE UM BUG FOI CORRIGIDO:**

### PROCURAR E REMOVER "LIXO":
- Console.log e logs de debug tempor√°rios
- C√≥digo comentado de tentativas que n√£o funcionaram
- Vari√°veis n√£o utilizadas
- Imports desnecess√°rios
- Fun√ß√µes experimentais que n√£o s√£o mais usadas
- Arquivos tempor√°rios criados para testes

### CHECKLIST DE LIMPEZA:
- [ ] Remover todos os console.log de debug
- [ ] Apagar c√≥digo comentado
- [ ] Verificar imports n√£o utilizados
- [ ] Remover vari√°veis declaradas mas n√£o usadas
- [ ] Limpar fun√ß√µes experimentais
- [ ] Verificar se todos os logs s√£o realmente necess√°rios
- [ ] Confirmar que n√£o h√° duplica√ß√£o de c√≥digo

### MANTER APENAS:
- Logs estrat√©gicos permanentes (error, warn, info)
- C√≥digo funcional e necess√°rio
- Coment√°rios explicativos relevantes

## ü§ù TRATAMENTO DE CONFLITOS
- Se encontrar c√≥digo inconsistente no @codebase, perguntar qual padr√£o seguir
- Se houver m√∫ltiplas implementa√ß√µes similares, escolher a mais recente/robusta
- Sempre explicar DECIS√ïES tomadas quando houver ambiguidade
- **SEMPRE documentar O QUE FOI DESCOBERTO durante a investiga√ß√£o**

## ‚ö° PERFORMANCE E OTIMIZA√á√ÉO
- Considerar √çNDICES de banco para queries novas
- Avaliar necessidade de PAGINA√á√ÉO em listagens
- Verificar se precisa de CACHE para dados frequentes
- Usar SELECT espec√≠ficos no Prisma (n√£o buscar tudo)

## ‚úÖ VALIDA√á√ÉO FINAL OBRIGAT√ìRIA

### CHECKLIST ANTES DE ENTREGAR SOLU√á√ÉO
1. **DESCOBERTA:** Analisei completamente o c√≥digo existente?
2. **FUNCIONALIDADE:** Testei se realmente funciona?
3. **CONSIST√äNCIA:** Segue padr√µes descobertos no @codebase?
4. **LOGS:** Adicionei logs estrat√©gicos apropriados?
5. **VALIDA√á√ÉO:** Usei schemas Zod com mensagens em portugu√™s?
6. **SEGURAN√áA:** Apliquei middlewares de auth necess√°rios?
7. **TIPOS:** TypeScript est√° tipado corretamente?
8. **LIMPEZA:** Removi todo c√≥digo experimental/debug?
9. **DOCUMENTA√á√ÉO:** Atualizei documenta√ß√£o relevante em docs/?
10. **REUTILIZA√á√ÉO:** Usei utilit√°rios existentes em @utils?

---

## üéØ RESUMO: SEMPRE DESCOBRIR, NUNCA ASSUMIR

**Esta rule for√ßa o agent a SER UM DETETIVE do c√≥digo, investigando e entendendo profundamente antes de implementar qualquer solu√ß√£o.**