---
description: Padrões de validação Zod e sistema de logging estratégico. Mensagens em português BR, logs estruturados, limpeza pós-correção e tratamento de erros padronizado
globs: 
alwaysApply: false
---
---
description: "Padrões de validação Zod e sistema de logging estratégico. Mensagens em português BR, logs estruturados, limpeza pós-correção e tratamento de erros padronizado"
globs: [
  "**/*.ts",
  "**/*.js", 
  "schemas/**/*",
  "validation/**/*",
  "utils/**/*"
]
priority: 3
tags: ["validation", "logging", "zod", "errors"]
applies_to: "validation_and_logging"
---

# VALIDAÇÃO E LOGS

## LOGS ESTRATÉGICOS OBRIGATÓRIOS

### Pontos Críticos para Logging
- **Início e fim** de operações importantes
- **Antes e depois** de queries no banco
- **Entrada e saída** de middlewares
- **Pontos de erro** e exceções
- **Validações** de dados
- **Autenticação** e autorização

### Níveis de Log
- **error**: Erros que impedem funcionamento
- **warn**: Situações suspeitas que merecem atenção
- **info**: Informações importantes do fluxo
- **debug**: Detalhes para debugging (só em desenvolvimento)

### Padrão de Logs Estruturados
```typescript
// Entrada de função
logger.info(`[${functionName}] Iniciando operação`, { 
  params,
  userId: req.user?.user_id,
  timestamp: new Date().toISOString()
});

// Query database  
logger.debug(`[${functionName}] Executando query`, { 
  query: 'SELECT * FROM users WHERE...',
  params: queryParams
});

// Validação
logger.info(`[${functionName}] Validando dados`, {
  schema: 'createUserSchema',
  hasErrors: errors.length > 0
});

// Erro
logger.error(`[${functionName}] Erro na operação`, { 
  error: error.message,
  stack: error.stack,
  context: { userId, operation: 'createUser' }
});

// Sucesso
logger.info(`[${functionName}] Operação concluída com sucesso`, { 
  result: { id: newUser.id, operation: 'createUser' },
  duration: Date.now() - startTime
});
```

### Configuração de Logger
```typescript
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
    ...(process.env.NODE_ENV !== 'production' ? [
      new winston.transports.Console({
        format: winston.format.simple()
      })
    ] : [])
  ]
});

export const getLogger = (module: string) => {
  return logger.child({ module });
};
```

## VALIDAÇÃO ZOD PADRÃO

### Mensagens em Português Brasileiro
```typescript
const messages = {
  required: 'Este campo é obrigatório',
  invalidEmail: 'Email deve ter um formato válido',
  minLength: (min: number) => `Deve ter pelo menos ${min} caracteres`,
  maxLength: (max: number) => `Deve ter no máximo ${max} caracteres`,
  invalidPhone: 'Telefone deve estar no formato (11) 99999-9999',
  weakPassword: 'Senha deve conter pelo menos: 1 letra minúscula, 1 maiúscula, 1 número e 1 caractere especial'
};
```

### Schemas Reutilizáveis
```typescript
// Schema base para ID
export const idSchema = z.string().uuid('ID deve ser um UUID válido');

// Schema para email
export const emailSchema = z.string()
  .email(messages.invalidEmail)
  .toLowerCase()
  .trim()
  .max(255, messages.maxLength(255));

// Schema para telefone brasileiro
export const phoneSchema = z.string()
  .regex(/^\(\d{2}\)\s\d{4,5}-\d{4}$/, messages.invalidPhone)
  .optional();

// Schema para senha forte
export const passwordSchema = z.string()
  .min(8, messages.minLength(8))
  .max(128, messages.maxLength(128))
  .regex(
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/,
    messages.weakPassword
  );

// Schema para nome
export const nameSchema = z.string()
  .trim()
  .min(2, messages.minLength(2))
  .max(100, messages.maxLength(100))
  .regex(/^[a-zA-ZÀ-ÿ\s]+$/, 'Nome deve conter apenas letras e espaços');
```

### Transformações Automáticas
```typescript
// String para número
const numberTransform = z.string().transform((val) => {
  const num = parseFloat(val);
  if (isNaN(num)) throw new Error('Deve ser um número válido');
  return num;
});

// String para boolean
const booleanTransform = z.string().transform((val) => {
  return val.toLowerCase() === 'true';
});

// Data no formato brasileiro
const dateTransform = z.string()
  .regex(/^\d{2}\/\d{2}\/\d{4}$/, 'Data deve estar no formato DD/MM/AAAA')
  .transform((val) => {
    const [day, month, year] = val.split('/');
    return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
  });
```

### Validação de Arquivos
```typescript
const fileSchema = z.object({
  fieldname: z.string(),
  originalname: z.string(),
  mimetype: z.enum(['image/jpeg', 'image/png', 'image/webp'], {

    errorMap: () => ({ message: 'Apenas arquivos JPEG, PNG ou WebP são permitidos' })