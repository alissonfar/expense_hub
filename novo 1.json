{
	"info": {
		"name": "Personal Expense Hub - Multi-Tenant Tests",
		"description": "Collection para validar isolamento multi-tenant e funcionalidades do sistema",
		"version": "2.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001/api",
			"type": "string"
		},
		{
			"key": "tokenHubA",
			"value": "",
			"type": "string"
		},
		{
			"key": "tokenHubB",
			"value": "",
			"type": "string"
		},
		{
			"key": "hubA_userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "hubB_userId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîß SETUP - Cria√ß√£o de Hubs",
			"item": [
				{
					"name": "1.1 - Registrar Admin Hub A",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Admin Hub A\",\n  \"email\": \"admin.huba@test.com\",\n  \"senha\": \"SenhaSegura123!\",\n  \"telefone\": \"(11) 99999-1111\",\n  \"nomeHub\": \"Empresa Alpha\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200 - Registro Hub A', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token JWT retornado', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.token).to.exist;",
									"    pm.globals.set('tokenHubA', response.data.token);",
									"});",
									"",
									"pm.test('Hub criado corretamente', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.user.nome).to.equal('Admin Hub A');",
									"    pm.globals.set('hubA_userId', response.data.user.id);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "1.2 - Registrar Admin Hub B",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Admin Hub B\",\n  \"email\": \"admin.hubb@test.com\",\n  \"senha\": \"SenhaSegura456!\",\n  \"telefone\": \"(11) 99999-2222\",\n  \"nomeHub\": \"Empresa Beta\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200 - Registro Hub B', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token JWT retornado', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.token).to.exist;",
									"    pm.globals.set('tokenHubB', response.data.token);",
									"});",
									"",
									"pm.test('Hub B diferente do Hub A', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.user.nome).to.equal('Admin Hub B');",
									"    pm.globals.set('hubB_userId', response.data.user.id);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "üîê AUTENTICA√á√ÉO",
			"item": [
				{
					"name": "2.1 - Login Hub A",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin.huba@test.com\",\n  \"senha\": \"SenhaSegura123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login Hub A sucesso', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.globals.set('tokenHubA', response.data.token);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "2.2 - Login Hub B",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin.hubb@test.com\",\n  \"senha\": \"SenhaSegura456!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login Hub B sucesso', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.globals.set('tokenHubB', response.data.token);",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "üë• TESTE CR√çTICO: ISOLAMENTO DE PESSOAS",
			"item": [
				{
					"name": "3.1 - Criar Pessoa no Hub A",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubA}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Jo√£o Hub A\",\n  \"email\": \"joao.huba@test.com\",\n  \"telefone\": \"(11) 99999-3333\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pessoas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pessoa criada no Hub A', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.nome).to.equal('Jo√£o Hub A');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "3.2 - Criar Pessoa no Hub B",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubB}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Maria Hub B\",\n  \"email\": \"maria.hubb@test.com\",\n  \"telefone\": \"(11) 99999-4444\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pessoas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Pessoa criada no Hub B', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.nome).to.equal('Maria Hub B');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "üö® 3.3 - TESTE CR√çTICO: Listar Pessoas Hub A (ISOLAMENTO)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubA}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pessoas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('üî• ISOLAMENTO: Hub A n√£o v√™ pessoas do Hub B', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    const pessoas = response.data;",
									"    ",
									"    // Deve conter apenas pessoas do Hub A",
									"    const temJoao = pessoas.some(p => p.nome === 'Jo√£o Hub A');",
									"    const temMaria = pessoas.some(p => p.nome === 'Maria Hub B');",
									"    ",
									"    pm.expect(temJoao).to.be.true; // Deve ter Jo√£o (Hub A)",
									"    pm.expect(temMaria).to.be.false; // N√ÉO deve ter Maria (Hub B)",
									"    ",
									"    if (temMaria) {",
									"        throw new Error('‚ùå FALHA DE ISOLAMENTO: Hub A consegue ver dados do Hub B!');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "üö® 3.4 - TESTE CR√çTICO: Listar Pessoas Hub B (ISOLAMENTO)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubB}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pessoas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('üî• ISOLAMENTO: Hub B n√£o v√™ pessoas do Hub A', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    const pessoas = response.data;",
									"    ",
									"    // Deve conter apenas pessoas do Hub B",
									"    const temMaria = pessoas.some(p => p.nome === 'Maria Hub B');",
									"    const temJoao = pessoas.some(p => p.nome === 'Jo√£o Hub A');",
									"    ",
									"    pm.expect(temMaria).to.be.true; // Deve ter Maria (Hub B)",
									"    pm.expect(temJoao).to.be.false; // N√ÉO deve ter Jo√£o (Hub A)",
									"    ",
									"    if (temJoao) {",
									"        throw new Error('‚ùå FALHA DE ISOLAMENTO: Hub B consegue ver dados do Hub A!');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "üè∑Ô∏è TESTE CR√çTICO: ISOLAMENTO DE TAGS",
			"item": [
				{
					"name": "4.1 - Criar Tag no Hub A",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubA}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Alimenta√ß√£o Hub A\",\n  \"cor\": \"#FF5733\",\n  \"icone\": \"üçî\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Tag criada no Hub A', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.nome).to.equal('Alimenta√ß√£o Hub A');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "4.2 - Criar Tag no Hub B",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubB}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Alimenta√ß√£o Hub B\",\n  \"cor\": \"#33FF57\",\n  \"icone\": \"ü•ó\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Tag criada no Hub B', function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.nome).to.equal('Alimenta√ß√£o Hub B');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "üö® 4.3 - TESTE CR√çTICO: Listar Tags Hub A (ISOLAMENTO)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubA}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('üî• ISOLAMENTO: Hub A n√£o v√™ tags do Hub B', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    const tags = response.data;",
									"    ",
									"    const temTagA = tags.some(t => t.nome === 'Alimenta√ß√£o Hub A');",
									"    const temTagB = tags.some(t => t.nome === 'Alimenta√ß√£o Hub B');",
									"    ",
									"    pm.expect(temTagA).to.be.true;",
									"    pm.expect(temTagB).to.be.false;",
									"    ",
									"    if (temTagB) {",
									"        throw new Error('‚ùå FALHA DE ISOLAMENTO: Hub A v√™ tags do Hub B!');",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "üö® 4.4 - TESTE CR√çTICO: Listar Tags Hub B (ISOLAMENTO)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubB}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('üî• ISOLAMENTO: Hub B n√£o v√™ tags do Hub A', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    const tags = response.data;",
									"    ",
									"    const temTagB = tags.some(t => t.nome === 'Alimenta√ß√£o Hub B');",
									"    const temTagA = tags.some(t => t.nome === 'Alimenta√ß√£o Hub A');",
									"    ",
									"    pm.expect(temTagB).to.be.true;",
									"    pm.expect(temTagA).to.be.false;",
									"    ",
									"    if (temTagA) {",
									"        throw new Error('‚ùå FALHA DE ISOLAMENTO: Hub B v√™ tags do Hub A!');",
									"    }",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "üîí TESTE DE SEGURAN√áA",
			"item": [
				{
					"name": "5.1 - Tentar Acesso sem Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pessoas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Acesso negado sem token', function () {",
									"    pm.response.to.have.status(401);",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.equal('TokenN√£oFornecido');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "5.2 - Tentar Acesso com Token Inv√°lido",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token-invalido"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pessoas",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pessoas"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token inv√°lido rejeitado', function () {",
									"    pm.response.to.have.status(401);",
									"    const response = pm.response.json();",
									"    pm.expect(response.error).to.equal('TokenInvalido');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "‚úÖ VALIDA√á√ÉO JWT",
			"item": [
				{
					"name": "6.1 - Verificar Perfil Hub A",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubA}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Perfil Hub A correto', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.email).to.equal('admin.huba@test.com');",
									"    pm.expect(response.data.nome).to.equal('Admin Hub A');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "6.2 - Verificar Perfil Hub B",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenHubB}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Perfil Hub B correto', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data.email).to.equal('admin.hubb@test.com');",
									"    pm.expect(response.data.nome).to.equal('Admin Hub B');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	]
}