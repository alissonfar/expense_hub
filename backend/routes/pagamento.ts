import { Router } from 'express';
import {
  listPagamentos,
  getPagamento,
  createPagamento,
  updatePagamento,
  deletePagamento,
  getConfiguracaoExcedente,
  updateConfiguracaoExcedente
} from '../controllers/pagamentoController';
import {
  createPagamentoSchema,
  updatePagamentoSchema,
  pagamentoParamsSchema,
  pagamentoQuerySchema,
  configuracaoExcedenteSchema
} from '../schemas/pagamento';
import {
  requireAuth,
  validateSchema,
  validateParams,
  validateQuery
} from '../middleware/auth';
import { injectPrismaClient } from '../middleware/prisma';

// =============================================
// CONFIGURA√á√ÉO DAS ROTAS DE PAGAMENTOS
// =============================================

const router = Router();

// =============================================
// ROTA DE INFORMA√á√ïES (DEVE VIR ANTES DE /:id)
// =============================================

/**
 * GET /api/pagamentos/info
 * Retorna informa√ß√µes sobre as rotas de pagamentos
 */
router.get('/info', (req, res) => {
  res.json({
    message: 'üí≥ Sistema de Pagamentos Compostos - Personal Expense Hub',
    description: 'Sistema avan√ßado de pagamentos que permite quitar m√∫ltiplas transa√ß√µes simultaneamente com processamento autom√°tico de excedente',
    version: '2.0.0',
    status: 'Operacional',
    baseUrl: '/api/pagamentos',
    features: [
      'üîÑ Pagamentos compostos (m√∫ltiplas transa√ß√µes)',
      'üîç Pagamentos individuais (compatibilidade)',
      'üí∞ Processamento autom√°tico de excedente',
      'üìä Filtros avan√ßados e pagina√ß√£o',
      '‚öôÔ∏è Configura√ß√µes personaliz√°veis',
      'üõ°Ô∏è Valida√ß√µes robustas de participa√ß√£o',
      'üìà Cria√ß√£o autom√°tica de receitas de excedente',
      'üîê Controle de permiss√µes granular'
    ],
    businessRules: {
      pagamentoComposto: [
        'Permite pagar m√∫ltiplas transa√ß√µes em uma √∫nica opera√ß√£o',
        'Calcula automaticamente excedentes quando valor pago > valor devido',
        'Cria receita autom√°tica para excedentes acima do m√≠nimo configurado',
        'Valida participa√ß√£o em todas as transa√ß√µes antes de processar'
      ],
      validacoes: [
        'Usu√°rio deve participar de todas as transa√ß√µes que quer pagar',
        'Valor aplicado n√£o pode exceder valor devido por transa√ß√£o',
        'Apenas transa√ß√µes do tipo GASTO podem ser pagas',
        'Pagamentos j√° quitados n√£o podem ser alterados'
      ],
      excedente: [
        'Excedentes s√£o processados automaticamente se >= valor m√≠nimo',
        'Receitas de excedente s√£o vinculadas ao pagamento original',
        'Configura√ß√µes de excedente s√£o controladas pelo propriet√°rio'
      ]
    },
    endpoints: {
      list: {
        method: 'GET',
        path: '/api/pagamentos',
        description: 'Lista pagamentos com filtros avan√ßados',
        auth: 'Requerida',
        query: {
          pessoa_id: 'number (opcional) - Filtrar por pessoa que pagou',
          transacao_id: 'number (opcional) - Filtrar por transa√ß√£o espec√≠fica',
          data_inicio: 'YYYY-MM-DD (opcional) - Data inicial do pagamento',
          data_fim: 'YYYY-MM-DD (opcional) - Data final do pagamento',
          forma_pagamento: 'PIX|DINHEIRO|TRANSFERENCIA|DEBITO|CREDITO|OUTROS (opcional)',
          tem_excedente: 'boolean (opcional) - Filtrar pagamentos com/sem excedente',
          valor_min: 'number (opcional) - Valor m√≠nimo do pagamento',
          valor_max: 'number (opcional) - Valor m√°ximo do pagamento',
          page: 'number (opcional) - P√°gina (padr√£o: 1)',
          limit: 'number (opcional) - Itens por p√°gina (padr√£o: 20, m√°x: 100)',
          sort_by: 'data_pagamento|valor_total|criado_em (opcional, padr√£o: data_pagamento)',
          sort_order: 'asc|desc (opcional, padr√£o: desc)'
        },
        response: {
          success: 'boolean',
          data: 'array de pagamentos com relacionamentos',
          pagination: 'informa√ß√µes de pagina√ß√£o',
          message: 'string',
          timestamp: 'string'
        }
      },
      create: {
        method: 'POST',
        path: '/api/pagamentos',
        description: 'Cria pagamento individual ou composto',
        auth: 'Requerida',
        body: {
          // Para pagamento individual (compatibilidade)
          individual: {
            transacao_id: 'number (obrigat√≥rio) - ID da transa√ß√£o a pagar',
            valor_pago: 'number (obrigat√≥rio) - Valor sendo pago',
            data_pagamento: 'YYYY-MM-DD (obrigat√≥rio) - Data do pagamento',
            forma_pagamento: 'PIX|DINHEIRO|TRANSFERENCIA|DEBITO|CREDITO|OUTROS (opcional, padr√£o: PIX)',
            observacoes: 'string (opcional) - Observa√ß√µes sobre o pagamento'
          },
          // Para pagamento composto (novo)
          composto: {
            transacoes: 'array (obrigat√≥rio) - Lista de transa√ß√µes a pagar',
            'transacoes[].transacao_id': 'number (obrigat√≥rio) - ID da transa√ß√£o',
            'transacoes[].valor_aplicado': 'number (obrigat√≥rio) - Valor aplicado nesta transa√ß√£o',
            data_pagamento: 'YYYY-MM-DD (obrigat√≥rio) - Data do pagamento',
            forma_pagamento: 'PIX|DINHEIRO|TRANSFERENCIA|DEBITO|CREDITO|OUTROS (opcional, padr√£o: PIX)',
            observacoes: 'string (opcional) - Observa√ß√µes sobre o pagamento',
            processar_excedente: 'boolean (opcional, padr√£o: true) - Se deve processar excedente automaticamente',
            criar_receita_excedente: 'boolean (opcional, padr√£o: true) - Se deve criar receita para excedente'
          }
        },
        examples: {
          individual: {
            transacao_id: 123,
            valor_pago: 50.00,
            data_pagamento: '2024-01-15',
            forma_pagamento: 'PIX',
            observacoes: 'Pagamento via PIX'
          },
          composto: {
            transacoes: [
              { transacao_id: 123, valor_aplicado: 30.00 },
              { transacao_id: 124, valor_aplicado: 45.50 },
              { transacao_id: 125, valor_aplicado: 24.50 }
            ],
            data_pagamento: '2024-01-15',
            forma_pagamento: 'PIX',
            observacoes: 'Pagamento mensal conjunto',
            processar_excedente: true,
            criar_receita_excedente: true
          }
        }
      },
      details: {
        method: 'GET',
        path: '/api/pagamentos/:id',
        description: 'Busca detalhes completos de um pagamento',
        auth: 'Requerida',
        params: {
          id: 'number (obrigat√≥rio) - ID do pagamento'
        },
        response: {
          success: 'boolean',
          data: 'objeto pagamento com detalhes completos e relacionamentos',
          message: 'string',
          timestamp: 'string'
        }
      },
      update: {
        method: 'PUT',
        path: '/api/pagamentos/:id',
        description: 'Atualiza informa√ß√µes de um pagamento',
        auth: 'Requerida (pr√≥prio usu√°rio ou propriet√°rio)',
        params: {
          id: 'number (obrigat√≥rio) - ID do pagamento'
        },
        body: {
          data_pagamento: 'YYYY-MM-DD (opcional) - Nova data do pagamento',
          forma_pagamento: 'PIX|DINHEIRO|TRANSFERENCIA|DEBITO|CREDITO|OUTROS (opcional)',
          observacoes: 'string (opcional) - Novas observa√ß√µes',
          processar_excedente: 'boolean (opcional) - Alterar processamento de excedente'
        },
        restrictions: [
          'Apenas quem registrou o pagamento ou propriet√°rio podem editar',
          'N√£o √© poss√≠vel alterar valores ou transa√ß√µes pagas',
          'Pagamentos que geraram quita√ß√£o total n√£o podem ser editados'
        ]
      },
      delete: {
        method: 'DELETE',
        path: '/api/pagamentos/:id',
        description: 'Remove um pagamento do sistema',
        auth: 'Requerida (pr√≥prio usu√°rio ou propriet√°rio)',
        params: {
          id: 'number (obrigat√≥rio) - ID do pagamento'
        },
        restrictions: [
          'Apenas quem registrou o pagamento ou propriet√°rio podem remover',
          'Pagamentos que geraram quita√ß√£o total n√£o podem ser removidos',
          'Remove automaticamente receitas de excedente vinculadas'
        ],
        response: {
          success: 'boolean',
          data: 'informa√ß√µes sobre remo√ß√£o realizada',
          message: 'string',
          timestamp: 'string'
        }
      },
      configuracoes: {
        get: {
          method: 'GET',
          path: '/api/pagamentos/configuracoes/excedente',
          description: 'Busca configura√ß√µes de processamento de excedente',
          auth: 'Requerida',
          response: {
            auto_criar_receita_excedente: 'boolean',
            valor_minimo_excedente: 'number',
            descricao_receita_excedente: 'string'
          }
        },
        update: {
          method: 'PUT',
          path: '/api/pagamentos/configuracoes/excedente',
          description: 'Atualiza configura√ß√µes de processamento de excedente',
          auth: 'Propriet√°rio',
          body: {
            auto_criar_receita_excedente: 'boolean (obrigat√≥rio) - Se deve criar receita automaticamente',
            valor_minimo_excedente: 'number (obrigat√≥rio) - Valor m√≠nimo para processamento (0-1000)',
            descricao_receita_excedente: 'string (obrigat√≥rio) - Descri√ß√£o padr√£o para receitas'
          }
        }
      }
    },
    security: {
      authentication: 'JWT Token obrigat√≥rio em todas as rotas',
      authorization: [
        'Usu√°rios podem ver seus pr√≥prios pagamentos',
        'Propriet√°rios podem ver todos os pagamentos',
        'Apenas quem registrou pode editar/remover pagamentos',
        'Configura√ß√µes s√≥ podem ser alteradas pelo propriet√°rio'
      ],
      validation: [
        'Valida√ß√£o com Zod em todos os inputs',
        'Verifica√ß√£o de participa√ß√£o em transa√ß√µes',
        'Controle de valores e saldos',
        'Preven√ß√£o de duplicatas e inconsist√™ncias'
      ]
    },
    integration: {
      triggers: [
        'atualizar_saldo_participante_pagamento - Atualiza saldos automaticamente',
        'validar_participacao_pagamento - Verifica participa√ß√£o obrigat√≥ria',
        'processar_excedente_pagamento - Processa excedentes automaticamente',
        'atualizar_status_transacao_pagamento - Atualiza status das transa√ß√µes'
      ],
      tables: [
        'pagamentos - Registro principal do pagamento',
        'pagamento_transacoes - Detalhamento por transa√ß√£o',
        'configuracoes_sistema - Configura√ß√µes de excedente',
        'transacoes - Receitas de excedente criadas automaticamente'
      ]
    },
    examples: {
      cenarioComum: {
        descricao: 'Maria deve R$ 64 na transa√ß√£o 123, R$ 78 na 124 e R$ 50 na 125. Total: R$ 192. Ela paga R$ 200.',
        request: {
          method: 'POST',
          url: '/api/pagamentos',
          body: {
            transacoes: [
              { transacao_id: 123, valor_aplicado: 64.00 },
              { transacao_id: 124, valor_aplicado: 78.00 },
              { transacao_id: 125, valor_aplicado: 50.00 }
            ],
            data_pagamento: '2024-01-15',
            forma_pagamento: 'PIX',
            processar_excedente: true
          }
        },
        result: {
          pagamento_criado: 'ID 456 com valor_total R$ 200,00',
          valor_aplicado: 'R$ 192,00 distribu√≠do nas 3 transa√ß√µes',
          excedente_processado: 'R$ 8,00 convertido em receita autom√°tica',
          receita_criada: 'Transa√ß√£o tipo RECEITA vinculada ao pagamento'
        }
      }
    },
    timestamp: new Date().toISOString()
  });
});

// =============================================
// ROTAS DE CONFIGURA√á√ïES (DEVEM VIR ANTES DE /:id)
// =============================================

/**
 * GET /api/pagamentos/configuracoes/excedente
 * Busca configura√ß√µes de processamento de excedente
 */
router.get('/configuracoes/excedente',
  requireAuth,
  injectPrismaClient,
  getConfiguracaoExcedente
);

/**
 * PUT /api/pagamentos/configuracoes/excedente
 * Atualiza configura√ß√µes de processamento de excedente (apenas propriet√°rio)
 */
router.put('/configuracoes/excedente',
  requireAuth,
  injectPrismaClient,
  validateSchema(configuracaoExcedenteSchema),
  updateConfiguracaoExcedente
);

// =============================================
// ROTAS PRINCIPAIS DE PAGAMENTOS
// =============================================

/**
 * GET /api/pagamentos
 * Lista todos os pagamentos com filtros avan√ßados e pagina√ß√£o
 */
router.get('/',
  requireAuth,
  injectPrismaClient,
  validateQuery(pagamentoQuerySchema),
  listPagamentos
);

/**
 * POST /api/pagamentos
 * Cria um novo pagamento (individual ou composto)
 */
router.post('/',
  requireAuth,
  injectPrismaClient,
  validateSchema(createPagamentoSchema),
  createPagamento
);

/**
 * GET /api/pagamentos/:id
 * Busca detalhes completos de um pagamento espec√≠fico
 */
router.get('/:id',
  requireAuth,
  injectPrismaClient,
  validateParams(pagamentoParamsSchema),
  getPagamento
);

/**
 * PUT /api/pagamentos/:id
 * Atualiza informa√ß√µes de um pagamento existente
 */
router.put('/:id',
  requireAuth,
  injectPrismaClient,
  validateParams(pagamentoParamsSchema),
  validateSchema(updatePagamentoSchema),
  updatePagamento
);

/**
 * DELETE /api/pagamentos/:id
 * Remove um pagamento do sistema (com valida√ß√µes de seguran√ßa)
 */
router.delete('/:id',
  requireAuth,
  injectPrismaClient,
  validateParams(pagamentoParamsSchema),
  deletePagamento
);

export default router; 