import { Router } from 'express';
import {
  listPessoas,
  createPessoa,
  getPessoa,
  updatePessoa,
  deletePessoa
} from '../controllers/pessoaController';
import {
  requireAuth,
  requireOwner,
  validateSchema,
  validateParams,
  validateQuery
} from '../middleware/auth';
import {
  createPessoaSchema,
  updatePessoaSchema,
  pessoaParamsSchema,
  pessoaQuerySchema
} from '../schemas/pessoa';

// =============================================
// CONFIGURA√á√ÉO DAS ROTAS DE PESSOAS
// =============================================

const router = Router();

// =============================================
// TODAS AS ROTAS REQUEREM AUTENTICA√á√ÉO
// =============================================

// =============================================
// ROTA DE INFORMA√á√ïES (DEVE VIR ANTES DE /:id)
// =============================================

/**
 * GET /api/pessoas/info
 * Retorna informa√ß√µes sobre as rotas de pessoas
 */
router.get('/info', (req, res) => {
  res.json({
    message: 'üë• Sistema de Gest√£o de Pessoas - Personal Expense Hub',
    version: '1.0.0',
    status: 'Operacional',
    permissions: {
      viewing: 'Usu√°rios autenticados podem visualizar pessoas',
      management: 'Apenas propriet√°rio pode criar/editar/desativar pessoas'
    },
    endpoints: {
      list: {
        method: 'GET',
        path: '/api/pessoas',
        description: 'Lista todas as pessoas',
        auth: 'Requerida',
        query: {
          ativo: 'boolean (opcional) - Filtrar por status ativo',
          proprietario: 'boolean (opcional) - Filtrar por propriet√°rio',
          page: 'number (opcional) - P√°gina (padr√£o: 1)',
          limit: 'number (opcional) - Itens por p√°gina (padr√£o: 20, m√°x: 100)'
        }
      },
      create: {
        method: 'POST',
        path: '/api/pessoas',
        description: 'Cria uma nova pessoa',
        auth: 'Propriet√°rio',
        body: {
          nome: 'string (obrigat√≥rio) - Nome completo',
          email: 'string (obrigat√≥rio) - Email √∫nico',
          telefone: 'string (opcional) - Formato: (XX) XXXXX-XXXX',
          eh_proprietario: 'boolean (opcional) - Apenas um propriet√°rio permitido'
        }
      },
      details: {
        method: 'GET',
        path: '/api/pessoas/:id',
        description: 'Busca detalhes de uma pessoa',
        auth: 'Requerida',
        params: {
          id: 'number (obrigat√≥rio) - ID da pessoa'
        }
      },
      update: {
        method: 'PUT',
        path: '/api/pessoas/:id',
        description: 'Atualiza dados de uma pessoa',
        auth: 'Propriet√°rio',
        params: {
          id: 'number (obrigat√≥rio) - ID da pessoa'
        },
        body: {
          nome: 'string (opcional) - Nome completo',
          email: 'string (opcional) - Email √∫nico',
          telefone: 'string (opcional) - Formato: (XX) XXXXX-XXXX'
        }
      },
      delete: {
        method: 'DELETE',
        path: '/api/pessoas/:id',
        description: 'Desativa uma pessoa (soft delete)',
        auth: 'Propriet√°rio',
        params: {
          id: 'number (obrigat√≥rio) - ID da pessoa'
        },
        restrictions: [
          'N√£o pode desativar propriet√°rio',
          'N√£o pode desativar pessoa com pend√™ncias'
        ]
      }
    },
    businessRules: [
      '‚úÖ Email √∫nico no sistema',
      '‚úÖ Apenas um propriet√°rio permitido',
      '‚úÖ Soft delete (ativo = false)',
      '‚úÖ N√£o permite desativar propriet√°rio',
      '‚úÖ N√£o permite desativar com pend√™ncias',
      '‚úÖ Telefone opcional mas formato espec√≠fico',
      '‚úÖ Participantes n√£o t√™m login inicialmente'
    ],
    features: [
      '‚úÖ Listagem com pagina√ß√£o',
      '‚úÖ Filtros por status e role',
      '‚úÖ Valida√ß√£o completa de dados',
      '‚úÖ Estat√≠sticas por pessoa',
      '‚úÖ Controle de permiss√µes',
      '‚úÖ Auditoria de mudan√ßas'
    ],
    timestamp: new Date().toISOString()
  });
});

/**
 * GET /api/pessoas
 * Lista todas as pessoas (com filtros opcionais)
 */
router.get('/',
  requireAuth,
  validateQuery(pessoaQuerySchema),
  listPessoas
);

/**
 * POST /api/pessoas
 * Cria uma nova pessoa (apenas propriet√°rio)
 */
router.post('/',
  requireAuth,
  requireOwner,
  validateSchema(createPessoaSchema),
  createPessoa
);

/**
 * GET /api/pessoas/:id
 * Busca detalhes de uma pessoa espec√≠fica
 */
router.get('/:id',
  requireAuth,
  validateParams(pessoaParamsSchema),
  getPessoa
);

/**
 * PUT /api/pessoas/:id
 * Atualiza dados de uma pessoa (apenas propriet√°rio)
 */
router.put('/:id',
  requireAuth,
  requireOwner,
  validateParams(pessoaParamsSchema),
  validateSchema(updatePessoaSchema),
  updatePessoa
);

/**
 * DELETE /api/pessoas/:id
 * Desativa uma pessoa (apenas propriet√°rio)
 */
router.delete('/:id',
  requireAuth,
  requireOwner,
  validateParams(pessoaParamsSchema),
  deletePessoa
);

export default router; 