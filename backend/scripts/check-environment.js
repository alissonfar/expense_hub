const crypto = require('crypto');

console.log('üîç VERIFICA√á√ÉO DE CONFIGURA√á√ÉO DE AMBIENTE');
console.log('=' .repeat(50));

// Verificar ambiente
const nodeEnv = process.env.NODE_ENV || 'development';
console.log(`üìã Ambiente: ${nodeEnv.toUpperCase()}`);

// Verificar FRONTEND_URL
const frontendUrl = process.env.FRONTEND_URL;
console.log(`üåê FRONTEND_URL: ${frontendUrl || 'N√ÉO CONFIGURADO'}`);

if (!frontendUrl) {
  console.log('‚ö†Ô∏è  AVISO: FRONTEND_URL n√£o est√° configurado!');
  console.log('   Em desenvolvimento: http://localhost:3000');
  console.log('   Em produ√ß√£o: https://seu-dominio.com');
} else {
  if (nodeEnv === 'production') {
    if (frontendUrl.includes('localhost') || frontendUrl.includes('127.0.0.1')) {
      console.log('‚ùå ERRO: FRONTEND_URL em produ√ß√£o n√£o pode ser localhost!');
      console.log('   Configure uma URL de produ√ß√£o v√°lida.');
    } else if (!frontendUrl.startsWith('https://')) {
      console.log('‚ö†Ô∏è  AVISO: Em produ√ß√£o, √© recomendado usar HTTPS');
    } else {
      console.log('‚úÖ FRONTEND_URL configurado corretamente para produ√ß√£o');
    }
  } else {
    console.log('‚úÖ FRONTEND_URL configurado para desenvolvimento');
  }
}

// Verificar outras vari√°veis importantes
console.log('\nüìã OUTRAS VARI√ÅVEIS IMPORTANTES:');
console.log('-'.repeat(30));

const importantVars = [
  'DATABASE_URL',
  'JWT_SECRET',
  'GMAIL_USER',
  'GMAIL_APP_PASSWORD',
  'EMAIL_FROM_NAME'
];

importantVars.forEach(varName => {
  const value = process.env[varName];
  if (value) {
    // Mascarar valores sens√≠veis
    if (varName.includes('SECRET') || varName.includes('PASSWORD') || varName.includes('URL')) {
      const masked = value.length > 8 ? value.substring(0, 4) + '***' + value.substring(value.length - 4) : '***';
      console.log(`‚úÖ ${varName}: ${masked}`);
    } else {
      console.log(`‚úÖ ${varName}: ${value}`);
    }
  } else {
    console.log(`‚ùå ${varName}: N√ÉO CONFIGURADO`);
  }
});

// Verificar URLs que ser√£o geradas
console.log('\nüîó URLs que ser√£o geradas nos emails:');
console.log('-'.repeat(30));

const baseUrl = frontendUrl || 'http://localhost:3000';
const testToken = crypto.randomBytes(32).toString('hex');

const emailUrls = [
  `${baseUrl}/verify-email?token=${testToken}`,
  `${baseUrl}/reset-password?token=${testToken}`,
  `${baseUrl}/ativar-convite?token=${testToken}`,
  `${baseUrl}/login`
];

emailUrls.forEach((url, index) => {
  const urlType = ['Verifica√ß√£o', 'Reset Senha', 'Ativar Convite', 'Login'][index];
  console.log(`üìß ${urlType}: ${url}`);
});

// Recomenda√ß√µes
console.log('\nüí° RECOMENDA√á√ïES:');
console.log('-'.repeat(30));

if (nodeEnv === 'production') {
  console.log('üöÄ Para PRODU√á√ÉO:');
  console.log('   ‚Ä¢ Configure FRONTEND_URL com HTTPS');
  console.log('   ‚Ä¢ Use vari√°veis de ambiente seguras');
  console.log('   ‚Ä¢ Configure CORS adequadamente');
  console.log('   ‚Ä¢ Monitore logs de email');
} else {
  console.log('üõ†Ô∏è  Para DESENVOLVIMENTO:');
  console.log('   ‚Ä¢ FRONTEND_URL pode ser localhost');
  console.log('   ‚Ä¢ Configure .env baseado no env.example');
  console.log('   ‚Ä¢ Teste emails com dom√≠nios v√°lidos');
}

console.log('\nüéâ Verifica√ß√£o conclu√≠da!');
console.log('=' .repeat(50)); 