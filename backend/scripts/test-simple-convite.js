const { PrismaClient } = require('@prisma/client');
const crypto = require('crypto');

const prisma = new PrismaClient();

console.log('üß™ TESTE SIMPLES DE ATIVA√á√ÉO DE CONVITE');
console.log('=' .repeat(50));

async function testSimpleConvite() {
  try {
    // 1. Criar uma pessoa com convite ativo
    console.log('üë§ 1. Criando pessoa com convite ativo...');
    
    const testEmail = `teste.simple.${Date.now()}@example.com`;
    const conviteToken = crypto.randomBytes(32).toString('hex');
    
    const pessoa = await prisma.pessoas.create({
      data: {
        nome: 'Teste Simple',
        email: testEmail,
        conviteToken: conviteToken,
        conviteAtivo: true,
        conviteExpiraEm: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 horas
        emailVerificado: false, // Inicialmente n√£o verificado
        ativo: true
      }
    });

    console.log('   ‚úÖ Pessoa criada:', pessoa.email);
    console.log('   üìä Status inicial:');
    console.log(`      - Email verificado: ${pessoa.emailVerificado}`);
    console.log(`      - Convite ativo: ${pessoa.conviteAtivo}`);
    console.log(`      - Tem senha: ${!!pessoa.senha_hash}`);

    // 2. Simular ativa√ß√£o do convite (como o controller faz)
    console.log('\n‚úÖ 2. Simulando ativa√ß√£o do convite...');
    
    const senhaHash = '$2b$12$teste.hash.simulado'; // Hash simulado
    
    const pessoaAtivada = await prisma.pessoas.update({
      where: { id: pessoa.id },
      data: {
        senha_hash: senhaHash,
        conviteToken: null,
        conviteExpiraEm: null,
        conviteAtivo: false,
        ativo: true,
        emailVerificado: true, // ‚úÖ CORRE√á√ÉO: Marcar como verificado
        emailVerificadoEm: new Date() // ‚úÖ CORRE√á√ÉO: Registrar data
      }
    });

    console.log('   ‚úÖ Convite ativado');
    console.log('   üìä Status ap√≥s ativa√ß√£o:');
    console.log(`      - Email verificado: ${pessoaAtivada.emailVerificado}`);
    console.log(`      - Data verifica√ß√£o: ${pessoaAtivada.emailVerificadoEm}`);
    console.log(`      - Convite ativo: ${pessoaAtivada.conviteAtivo}`);
    console.log(`      - Tem senha: ${!!pessoaAtivada.senha_hash}`);

    // 3. Verificar se o login funcionaria
    console.log('\nüîê 3. Verificando se login funcionaria...');
    
    if (pessoaAtivada.emailVerificado && pessoaAtivada.senha_hash) {
      console.log('   ‚úÖ Login seria permitido!');
      console.log('   ‚úÖ Conta est√° verificada e tem senha');
    } else {
      console.log('   ‚ùå Login seria bloqueado!');
      if (!pessoaAtivada.emailVerificado) {
        console.log('   ‚ùå Email n√£o verificado');
      }
      if (!pessoaAtivada.senha_hash) {
        console.log('   ‚ùå Sem senha definida');
      }
    }

    // 4. Limpar dados de teste
    console.log('\nüßπ 4. Limpando dados de teste...');
    await prisma.pessoas.delete({
      where: { id: pessoa.id }
    });
    console.log('   ‚úÖ Dados de teste removidos');

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('=' .repeat(50));
    console.log('‚úÖ Corre√ß√£o aplicada corretamente');
    console.log('‚úÖ Conta marcada como verificada ap√≥s ativa√ß√£o');
    console.log('‚úÖ Login funcionaria normalmente');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    
    if (error.message.includes('emailVerificado')) {
      console.error('üö® PROBLEMA: Campo emailVerificado n√£o existe no banco!');
      console.error('   Execute: npx prisma db push');
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Executar teste
testSimpleConvite(); 